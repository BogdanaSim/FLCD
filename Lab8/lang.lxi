%{
#include <stdio.h>
#include <string.h>
int lines = 1;
%}

%option noyywrap
%option caseless

DIGIT [0-9]
NON_ZERO_DIGIT [1-9]
NUMBER 0|[+-]?[1-9][0-9]*
LETTER \'[a-zA-Z0-9 ]\'
STRING \'[a-zA-Z0-9.,;! ]*\' 
IDENTIFIER [a-zA-Z]([a-zA-Z]|[0-9])*

%%

"and" { printf("Reserved word - %s\n", yytext);}
"or" { printf("Reserved word - %s\n", yytext);}
"var" { printf("Reserved word - %s\n", yytext);}
"number" { printf("Reserved word - %s\n", yytext); }
"string" { printf("Reserved word - %s\n", yytext); }
"if" { printf("Reserved word - %s\n", yytext); }
"else" { printf("Reserved word - %s\n", yytext);  }
"while" { printf("Reserved word - %s\n", yytext); }
"for" { printf("Reserved word - %s\n", yytext);  }
"exec" { printf("Reserved word - %s\n", yytext);  }
"read" { printf("Reserved word - %s\n", yytext); }
"write" { printf("Reserved word - %s\n", yytext); }
"array" { printf("Reserved word - %s\n", yytext); }


{IDENTIFIER} {printf("Identifier - %s\n", yytext);  }



{NUMBER} {printf("Number constant - %s\n", yytext);}

{STRING} {printf("String constant - %s\n", yytext); }



"+" { printf("Operator - %s\n", yytext); }
"-" { printf("Operator - %s\n", yytext); }
"*" { printf("Operator - %s\n", yytext); }
"/" { printf("Operator - %s\n", yytext); }
"%" { printf("Operator - %s\n", yytext); }
">" { printf("Operator - %s\n", yytext); }
"<" { printf("Operator - %s\n", yytext); }
">=" { printf("Operator - %s\n", yytext); }
"=" { printf("Operator - %s\n", yytext); }
"<=" { printf("Operator - %s\n", yytext); }
"==" { printf("Operator - %s\n", yytext); }
"!=" { printf("Operator - %s\n", yytext); }
"!" { printf("Operator - %s\n", yytext); }


"(" { printf("Separator - %s\n", yytext); }
")" { printf("Separator - %s\n", yytext); }
"[" { printf("Separator - %s\n", yytext); }
"]" { printf("Separator - %s\n", yytext); }
"{" { printf("Separator - %s\n", yytext); }
"}" { printf("Separator - %s\n", yytext); }
"," { printf("Separator - %s\n", yytext); }
"." { printf("Separator - %s\n", yytext); }
";" { printf("Separator - %s\n", yytext);}
":" { printf("Separator - %s\n", yytext);}

[ \t]+ {}

[\n]+ {++lines;}

[0-9]([a-zA-Z]|[0-9])* {printf("Illegal identifier at token {%s} at line %d\n", yytext, lines); }

\'[a-zA-Z0-9.,;! ]*$ {printf("Bad string at token {%s} at line %d\n", yytext, lines); }
%%

int main( argc, argv )
int argc;
char **argv;
{
	++argv, --argc;	/* skip over program name */
	if ( argc > 0 )
		yyin = fopen( argv[0], "r" );
	else
		yyin = stdin;
	yylex();
}