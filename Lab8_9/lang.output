Terminals unused in grammar

   '+'
   '-'
   '*'
   '/'
   COMMA
   COLON
   SPACE


Gramatica

    0 $accept: program $end

    1 program: EXEC compound_stmt

    2 declaration: type ID

    3 type: NUMBER
    4     | STRING
    5     | ARRAY OPEN_RIGHT_BRACKET CONST CLOSED_RIGHT_BRACKET

    6 compound_stmt: OPEN_CURLY_BRACKET list_stmts CLOSED_CURLY_BRACKET

    7 list_stmts: stmt stmtTemp

    8 stmtTemp: /* goleste */
    9         | list_stmts

   10 stmt: simple_stmt SEMI_COLON
   11     | struct_stmt

   12 simple_stmt: assignment_stmt
   13            | io_stmt
   14            | declaration

   15 struct_stmt: compound_stmt
   16            | if_stmt
   17            | while_stmt
   18            | for_stmt

   19 if_stmt: IF OPEN_ROUND_BRACKET boolean_condition CLOSED_ROUND_BRACKET compound_stmt
   20        | IF OPEN_ROUND_BRACKET boolean_condition CLOSED_ROUND_BRACKET compound_stmt ELSE compound_stmt

   21 for_stmt: FOR OPEN_ROUND_BRACKET NUMBER assignment_stmt SEMI_COLON OPEN_ROUND_BRACKET boolean_condition CLOSED_ROUND_BRACKET SEMI_COLON assignment_stmt CLOSED_ROUND_BRACKET compound_stmt

   22 while_stmt: WHILE OPEN_ROUND_BRACKET boolean_condition CLOSED_ROUND_BRACKET compound_stmt

   23 assignment_stmt: ID ASSIGNMENT expression

   24 expression: term2 term1

   25 term1: PLUS term2 term1
   26      | MINUS term2 term1
   27      | /* goleste */

   28 term2: factor2 factor1

   29 factor1: MUL factor2 factor1
   30        | DIV factor2 factor1
   31        | /* goleste */

   32 factor2: OPEN_ROUND_BRACKET expression CLOSED_ROUND_BRACKET
   33        | CONST
   34        | ID
   35        | id_index

   36 id_index: ID OPEN_RIGHT_BRACKET CONST CLOSED_RIGHT_BRACKET

   37 io_stmt: READ READ_OP ID
   38        | WRITE WRITE_OP ID
   39        | WRITE WRITE_OP CONST

   40 condition: expression GREATER_THAN expression
   41          | expression GREATER_OR_EQUAL expression
   42          | expression LOWER_THAN expression
   43          | expression LOWER_OR_EQUAL expression
   44          | expression EQUAL expression
   45          | expression NOT_EQUAL expression

   46 boolean_condition: condition boolean_condition_op

   47 boolean_condition_op: /* goleste */
   48                     | AND boolean_condition
   49                     | OR boolean_condition
   50                     | XOR boolean_condition


Terminale, cu reguli acolo unde acestea apar

$end (0) 0
'*' (42)
'+' (43)
'-' (45)
'/' (47)
error (256)
ARRAY (258) 5
IF (259) 19 20
ELSE (260) 20
FOR (261) 21
WHILE (262) 22
EXEC (263) 1
AND (264) 48
OR (265) 49
XOR (266) 50
READ (267) 37
WRITE (268) 38 39
STRING (269) 4
NUMBER (270) 3 21
ID (271) 2 23 34 36 37 38
CONST (272) 5 33 36 39
ASSIGNMENT (273) 23
EQUAL (274) 44
NOT_EQUAL (275) 45
LOWER_OR_EQUAL (276) 43
GREATER_OR_EQUAL (277) 41
LOWER_THAN (278) 42
GREATER_THAN (279) 40
PLUS (280) 25
MINUS (281) 26
DIV (282) 30
MUL (283) 29
OPEN_CURLY_BRACKET (284) 6
CLOSED_CURLY_BRACKET (285) 6
OPEN_ROUND_BRACKET (286) 19 20 21 22 32
CLOSED_ROUND_BRACKET (287) 19 20 21 22 32
OPEN_RIGHT_BRACKET (288) 5 36
CLOSED_RIGHT_BRACKET (289) 5 36
READ_OP (290) 37
WRITE_OP (291) 38 39
COMMA (292)
SEMI_COLON (293) 10 21
COLON (294)
SPACE (295)


Non-terminale, cu reguli acolo unde acestea apar

$accept (45)
    pe stânga: 0
program (46)
    pe stânga: 1, pe dreapta: 0
declaration (47)
    pe stânga: 2, pe dreapta: 14
type (48)
    pe stânga: 3 4 5, pe dreapta: 2
compound_stmt (49)
    pe stânga: 6, pe dreapta: 1 15 19 20 21 22
list_stmts (50)
    pe stânga: 7, pe dreapta: 6 9
stmtTemp (51)
    pe stânga: 8 9, pe dreapta: 7
stmt (52)
    pe stânga: 10 11, pe dreapta: 7
simple_stmt (53)
    pe stânga: 12 13 14, pe dreapta: 10
struct_stmt (54)
    pe stânga: 15 16 17 18, pe dreapta: 11
if_stmt (55)
    pe stânga: 19 20, pe dreapta: 16
for_stmt (56)
    pe stânga: 21, pe dreapta: 18
while_stmt (57)
    pe stânga: 22, pe dreapta: 17
assignment_stmt (58)
    pe stânga: 23, pe dreapta: 12 21
expression (59)
    pe stânga: 24, pe dreapta: 23 32 40 41 42 43 44 45
term1 (60)
    pe stânga: 25 26 27, pe dreapta: 24 25 26
term2 (61)
    pe stânga: 28, pe dreapta: 24 25 26
factor1 (62)
    pe stânga: 29 30 31, pe dreapta: 28 29 30
factor2 (63)
    pe stânga: 32 33 34 35, pe dreapta: 28 29 30
id_index (64)
    pe stânga: 36, pe dreapta: 35
io_stmt (65)
    pe stânga: 37 38 39, pe dreapta: 13
condition (66)
    pe stânga: 40 41 42 43 44 45, pe dreapta: 46
boolean_condition (67)
    pe stânga: 46, pe dreapta: 19 20 21 22 48 49 50
boolean_condition_op (68)
    pe stânga: 47 48 49 50, pe dreapta: 46


stare 0

    0 $accept: . program $end

    EXEC  shift, si mergi în starea 1

    program  mergi în starea 2


stare 1

    1 program: EXEC . compound_stmt

    OPEN_CURLY_BRACKET  shift, si mergi în starea 3

    compound_stmt  mergi în starea 4


stare 2

    0 $accept: program . $end

    $end  shift, si mergi în starea 5


stare 3

    6 compound_stmt: OPEN_CURLY_BRACKET . list_stmts CLOSED_CURLY_BRACKET

    ARRAY               shift, si mergi în starea 6
    IF                  shift, si mergi în starea 7
    FOR                 shift, si mergi în starea 8
    WHILE               shift, si mergi în starea 9
    READ                shift, si mergi în starea 10
    WRITE               shift, si mergi în starea 11
    STRING              shift, si mergi în starea 12
    NUMBER              shift, si mergi în starea 13
    ID                  shift, si mergi în starea 14
    OPEN_CURLY_BRACKET  shift, si mergi în starea 3

    declaration      mergi în starea 15
    type             mergi în starea 16
    compound_stmt    mergi în starea 17
    list_stmts       mergi în starea 18
    stmt             mergi în starea 19
    simple_stmt      mergi în starea 20
    struct_stmt      mergi în starea 21
    if_stmt          mergi în starea 22
    for_stmt         mergi în starea 23
    while_stmt       mergi în starea 24
    assignment_stmt  mergi în starea 25
    io_stmt          mergi în starea 26


stare 4

    1 program: EXEC compound_stmt .

    $implicit  reduce folosind regula 1 (program)


stare 5

    0 $accept: program $end .

    $implicit  accept


stare 6

    5 type: ARRAY . OPEN_RIGHT_BRACKET CONST CLOSED_RIGHT_BRACKET

    OPEN_RIGHT_BRACKET  shift, si mergi în starea 27


stare 7

   19 if_stmt: IF . OPEN_ROUND_BRACKET boolean_condition CLOSED_ROUND_BRACKET compound_stmt
   20        | IF . OPEN_ROUND_BRACKET boolean_condition CLOSED_ROUND_BRACKET compound_stmt ELSE compound_stmt

    OPEN_ROUND_BRACKET  shift, si mergi în starea 28


stare 8

   21 for_stmt: FOR . OPEN_ROUND_BRACKET NUMBER assignment_stmt SEMI_COLON OPEN_ROUND_BRACKET boolean_condition CLOSED_ROUND_BRACKET SEMI_COLON assignment_stmt CLOSED_ROUND_BRACKET compound_stmt

    OPEN_ROUND_BRACKET  shift, si mergi în starea 29


stare 9

   22 while_stmt: WHILE . OPEN_ROUND_BRACKET boolean_condition CLOSED_ROUND_BRACKET compound_stmt

    OPEN_ROUND_BRACKET  shift, si mergi în starea 30


stare 10

   37 io_stmt: READ . READ_OP ID

    READ_OP  shift, si mergi în starea 31


stare 11

   38 io_stmt: WRITE . WRITE_OP ID
   39        | WRITE . WRITE_OP CONST

    WRITE_OP  shift, si mergi în starea 32


stare 12

    4 type: STRING .

    $implicit  reduce folosind regula 4 (type)


stare 13

    3 type: NUMBER .

    $implicit  reduce folosind regula 3 (type)


stare 14

   23 assignment_stmt: ID . ASSIGNMENT expression

    ASSIGNMENT  shift, si mergi în starea 33


stare 15

   14 simple_stmt: declaration .

    $implicit  reduce folosind regula 14 (simple_stmt)


stare 16

    2 declaration: type . ID

    ID  shift, si mergi în starea 34


stare 17

   15 struct_stmt: compound_stmt .

    $implicit  reduce folosind regula 15 (struct_stmt)


stare 18

    6 compound_stmt: OPEN_CURLY_BRACKET list_stmts . CLOSED_CURLY_BRACKET

    CLOSED_CURLY_BRACKET  shift, si mergi în starea 35


stare 19

    7 list_stmts: stmt . stmtTemp

    ARRAY               shift, si mergi în starea 6
    IF                  shift, si mergi în starea 7
    FOR                 shift, si mergi în starea 8
    WHILE               shift, si mergi în starea 9
    READ                shift, si mergi în starea 10
    WRITE               shift, si mergi în starea 11
    STRING              shift, si mergi în starea 12
    NUMBER              shift, si mergi în starea 13
    ID                  shift, si mergi în starea 14
    OPEN_CURLY_BRACKET  shift, si mergi în starea 3

    $implicit  reduce folosind regula 8 (stmtTemp)

    declaration      mergi în starea 15
    type             mergi în starea 16
    compound_stmt    mergi în starea 17
    list_stmts       mergi în starea 36
    stmtTemp         mergi în starea 37
    stmt             mergi în starea 19
    simple_stmt      mergi în starea 20
    struct_stmt      mergi în starea 21
    if_stmt          mergi în starea 22
    for_stmt         mergi în starea 23
    while_stmt       mergi în starea 24
    assignment_stmt  mergi în starea 25
    io_stmt          mergi în starea 26


stare 20

   10 stmt: simple_stmt . SEMI_COLON

    SEMI_COLON  shift, si mergi în starea 38


stare 21

   11 stmt: struct_stmt .

    $implicit  reduce folosind regula 11 (stmt)


stare 22

   16 struct_stmt: if_stmt .

    $implicit  reduce folosind regula 16 (struct_stmt)


stare 23

   18 struct_stmt: for_stmt .

    $implicit  reduce folosind regula 18 (struct_stmt)


stare 24

   17 struct_stmt: while_stmt .

    $implicit  reduce folosind regula 17 (struct_stmt)


stare 25

   12 simple_stmt: assignment_stmt .

    $implicit  reduce folosind regula 12 (simple_stmt)


stare 26

   13 simple_stmt: io_stmt .

    $implicit  reduce folosind regula 13 (simple_stmt)


stare 27

    5 type: ARRAY OPEN_RIGHT_BRACKET . CONST CLOSED_RIGHT_BRACKET

    CONST  shift, si mergi în starea 39


stare 28

   19 if_stmt: IF OPEN_ROUND_BRACKET . boolean_condition CLOSED_ROUND_BRACKET compound_stmt
   20        | IF OPEN_ROUND_BRACKET . boolean_condition CLOSED_ROUND_BRACKET compound_stmt ELSE compound_stmt

    ID                  shift, si mergi în starea 40
    CONST               shift, si mergi în starea 41
    OPEN_ROUND_BRACKET  shift, si mergi în starea 42

    expression         mergi în starea 43
    term2              mergi în starea 44
    factor2            mergi în starea 45
    id_index           mergi în starea 46
    condition          mergi în starea 47
    boolean_condition  mergi în starea 48


stare 29

   21 for_stmt: FOR OPEN_ROUND_BRACKET . NUMBER assignment_stmt SEMI_COLON OPEN_ROUND_BRACKET boolean_condition CLOSED_ROUND_BRACKET SEMI_COLON assignment_stmt CLOSED_ROUND_BRACKET compound_stmt

    NUMBER  shift, si mergi în starea 49


stare 30

   22 while_stmt: WHILE OPEN_ROUND_BRACKET . boolean_condition CLOSED_ROUND_BRACKET compound_stmt

    ID                  shift, si mergi în starea 40
    CONST               shift, si mergi în starea 41
    OPEN_ROUND_BRACKET  shift, si mergi în starea 42

    expression         mergi în starea 43
    term2              mergi în starea 44
    factor2            mergi în starea 45
    id_index           mergi în starea 46
    condition          mergi în starea 47
    boolean_condition  mergi în starea 50


stare 31

   37 io_stmt: READ READ_OP . ID

    ID  shift, si mergi în starea 51


stare 32

   38 io_stmt: WRITE WRITE_OP . ID
   39        | WRITE WRITE_OP . CONST

    ID     shift, si mergi în starea 52
    CONST  shift, si mergi în starea 53


stare 33

   23 assignment_stmt: ID ASSIGNMENT . expression

    ID                  shift, si mergi în starea 40
    CONST               shift, si mergi în starea 41
    OPEN_ROUND_BRACKET  shift, si mergi în starea 42

    expression  mergi în starea 54
    term2       mergi în starea 44
    factor2     mergi în starea 45
    id_index    mergi în starea 46


stare 34

    2 declaration: type ID .

    $implicit  reduce folosind regula 2 (declaration)


stare 35

    6 compound_stmt: OPEN_CURLY_BRACKET list_stmts CLOSED_CURLY_BRACKET .

    $implicit  reduce folosind regula 6 (compound_stmt)


stare 36

    9 stmtTemp: list_stmts .

    $implicit  reduce folosind regula 9 (stmtTemp)


stare 37

    7 list_stmts: stmt stmtTemp .

    $implicit  reduce folosind regula 7 (list_stmts)


stare 38

   10 stmt: simple_stmt SEMI_COLON .

    $implicit  reduce folosind regula 10 (stmt)


stare 39

    5 type: ARRAY OPEN_RIGHT_BRACKET CONST . CLOSED_RIGHT_BRACKET

    CLOSED_RIGHT_BRACKET  shift, si mergi în starea 55


stare 40

   34 factor2: ID .
   36 id_index: ID . OPEN_RIGHT_BRACKET CONST CLOSED_RIGHT_BRACKET

    OPEN_RIGHT_BRACKET  shift, si mergi în starea 56

    $implicit  reduce folosind regula 34 (factor2)


stare 41

   33 factor2: CONST .

    $implicit  reduce folosind regula 33 (factor2)


stare 42

   32 factor2: OPEN_ROUND_BRACKET . expression CLOSED_ROUND_BRACKET

    ID                  shift, si mergi în starea 40
    CONST               shift, si mergi în starea 41
    OPEN_ROUND_BRACKET  shift, si mergi în starea 42

    expression  mergi în starea 57
    term2       mergi în starea 44
    factor2     mergi în starea 45
    id_index    mergi în starea 46


stare 43

   40 condition: expression . GREATER_THAN expression
   41          | expression . GREATER_OR_EQUAL expression
   42          | expression . LOWER_THAN expression
   43          | expression . LOWER_OR_EQUAL expression
   44          | expression . EQUAL expression
   45          | expression . NOT_EQUAL expression

    EQUAL             shift, si mergi în starea 58
    NOT_EQUAL         shift, si mergi în starea 59
    LOWER_OR_EQUAL    shift, si mergi în starea 60
    GREATER_OR_EQUAL  shift, si mergi în starea 61
    LOWER_THAN        shift, si mergi în starea 62
    GREATER_THAN      shift, si mergi în starea 63


stare 44

   24 expression: term2 . term1

    PLUS   shift, si mergi în starea 64
    MINUS  shift, si mergi în starea 65

    $implicit  reduce folosind regula 27 (term1)

    term1  mergi în starea 66


stare 45

   28 term2: factor2 . factor1

    DIV  shift, si mergi în starea 67
    MUL  shift, si mergi în starea 68

    $implicit  reduce folosind regula 31 (factor1)

    factor1  mergi în starea 69


stare 46

   35 factor2: id_index .

    $implicit  reduce folosind regula 35 (factor2)


stare 47

   46 boolean_condition: condition . boolean_condition_op

    AND  shift, si mergi în starea 70
    OR   shift, si mergi în starea 71
    XOR  shift, si mergi în starea 72

    $implicit  reduce folosind regula 47 (boolean_condition_op)

    boolean_condition_op  mergi în starea 73


stare 48

   19 if_stmt: IF OPEN_ROUND_BRACKET boolean_condition . CLOSED_ROUND_BRACKET compound_stmt
   20        | IF OPEN_ROUND_BRACKET boolean_condition . CLOSED_ROUND_BRACKET compound_stmt ELSE compound_stmt

    CLOSED_ROUND_BRACKET  shift, si mergi în starea 74


stare 49

   21 for_stmt: FOR OPEN_ROUND_BRACKET NUMBER . assignment_stmt SEMI_COLON OPEN_ROUND_BRACKET boolean_condition CLOSED_ROUND_BRACKET SEMI_COLON assignment_stmt CLOSED_ROUND_BRACKET compound_stmt

    ID  shift, si mergi în starea 14

    assignment_stmt  mergi în starea 75


stare 50

   22 while_stmt: WHILE OPEN_ROUND_BRACKET boolean_condition . CLOSED_ROUND_BRACKET compound_stmt

    CLOSED_ROUND_BRACKET  shift, si mergi în starea 76


stare 51

   37 io_stmt: READ READ_OP ID .

    $implicit  reduce folosind regula 37 (io_stmt)


stare 52

   38 io_stmt: WRITE WRITE_OP ID .

    $implicit  reduce folosind regula 38 (io_stmt)


stare 53

   39 io_stmt: WRITE WRITE_OP CONST .

    $implicit  reduce folosind regula 39 (io_stmt)


stare 54

   23 assignment_stmt: ID ASSIGNMENT expression .

    $implicit  reduce folosind regula 23 (assignment_stmt)


stare 55

    5 type: ARRAY OPEN_RIGHT_BRACKET CONST CLOSED_RIGHT_BRACKET .

    $implicit  reduce folosind regula 5 (type)


stare 56

   36 id_index: ID OPEN_RIGHT_BRACKET . CONST CLOSED_RIGHT_BRACKET

    CONST  shift, si mergi în starea 77


stare 57

   32 factor2: OPEN_ROUND_BRACKET expression . CLOSED_ROUND_BRACKET

    CLOSED_ROUND_BRACKET  shift, si mergi în starea 78


stare 58

   44 condition: expression EQUAL . expression

    ID                  shift, si mergi în starea 40
    CONST               shift, si mergi în starea 41
    OPEN_ROUND_BRACKET  shift, si mergi în starea 42

    expression  mergi în starea 79
    term2       mergi în starea 44
    factor2     mergi în starea 45
    id_index    mergi în starea 46


stare 59

   45 condition: expression NOT_EQUAL . expression

    ID                  shift, si mergi în starea 40
    CONST               shift, si mergi în starea 41
    OPEN_ROUND_BRACKET  shift, si mergi în starea 42

    expression  mergi în starea 80
    term2       mergi în starea 44
    factor2     mergi în starea 45
    id_index    mergi în starea 46


stare 60

   43 condition: expression LOWER_OR_EQUAL . expression

    ID                  shift, si mergi în starea 40
    CONST               shift, si mergi în starea 41
    OPEN_ROUND_BRACKET  shift, si mergi în starea 42

    expression  mergi în starea 81
    term2       mergi în starea 44
    factor2     mergi în starea 45
    id_index    mergi în starea 46


stare 61

   41 condition: expression GREATER_OR_EQUAL . expression

    ID                  shift, si mergi în starea 40
    CONST               shift, si mergi în starea 41
    OPEN_ROUND_BRACKET  shift, si mergi în starea 42

    expression  mergi în starea 82
    term2       mergi în starea 44
    factor2     mergi în starea 45
    id_index    mergi în starea 46


stare 62

   42 condition: expression LOWER_THAN . expression

    ID                  shift, si mergi în starea 40
    CONST               shift, si mergi în starea 41
    OPEN_ROUND_BRACKET  shift, si mergi în starea 42

    expression  mergi în starea 83
    term2       mergi în starea 44
    factor2     mergi în starea 45
    id_index    mergi în starea 46


stare 63

   40 condition: expression GREATER_THAN . expression

    ID                  shift, si mergi în starea 40
    CONST               shift, si mergi în starea 41
    OPEN_ROUND_BRACKET  shift, si mergi în starea 42

    expression  mergi în starea 84
    term2       mergi în starea 44
    factor2     mergi în starea 45
    id_index    mergi în starea 46


stare 64

   25 term1: PLUS . term2 term1

    ID                  shift, si mergi în starea 40
    CONST               shift, si mergi în starea 41
    OPEN_ROUND_BRACKET  shift, si mergi în starea 42

    term2     mergi în starea 85
    factor2   mergi în starea 45
    id_index  mergi în starea 46


stare 65

   26 term1: MINUS . term2 term1

    ID                  shift, si mergi în starea 40
    CONST               shift, si mergi în starea 41
    OPEN_ROUND_BRACKET  shift, si mergi în starea 42

    term2     mergi în starea 86
    factor2   mergi în starea 45
    id_index  mergi în starea 46


stare 66

   24 expression: term2 term1 .

    $implicit  reduce folosind regula 24 (expression)


stare 67

   30 factor1: DIV . factor2 factor1

    ID                  shift, si mergi în starea 40
    CONST               shift, si mergi în starea 41
    OPEN_ROUND_BRACKET  shift, si mergi în starea 42

    factor2   mergi în starea 87
    id_index  mergi în starea 46


stare 68

   29 factor1: MUL . factor2 factor1

    ID                  shift, si mergi în starea 40
    CONST               shift, si mergi în starea 41
    OPEN_ROUND_BRACKET  shift, si mergi în starea 42

    factor2   mergi în starea 88
    id_index  mergi în starea 46


stare 69

   28 term2: factor2 factor1 .

    $implicit  reduce folosind regula 28 (term2)


stare 70

   48 boolean_condition_op: AND . boolean_condition

    ID                  shift, si mergi în starea 40
    CONST               shift, si mergi în starea 41
    OPEN_ROUND_BRACKET  shift, si mergi în starea 42

    expression         mergi în starea 43
    term2              mergi în starea 44
    factor2            mergi în starea 45
    id_index           mergi în starea 46
    condition          mergi în starea 47
    boolean_condition  mergi în starea 89


stare 71

   49 boolean_condition_op: OR . boolean_condition

    ID                  shift, si mergi în starea 40
    CONST               shift, si mergi în starea 41
    OPEN_ROUND_BRACKET  shift, si mergi în starea 42

    expression         mergi în starea 43
    term2              mergi în starea 44
    factor2            mergi în starea 45
    id_index           mergi în starea 46
    condition          mergi în starea 47
    boolean_condition  mergi în starea 90


stare 72

   50 boolean_condition_op: XOR . boolean_condition

    ID                  shift, si mergi în starea 40
    CONST               shift, si mergi în starea 41
    OPEN_ROUND_BRACKET  shift, si mergi în starea 42

    expression         mergi în starea 43
    term2              mergi în starea 44
    factor2            mergi în starea 45
    id_index           mergi în starea 46
    condition          mergi în starea 47
    boolean_condition  mergi în starea 91


stare 73

   46 boolean_condition: condition boolean_condition_op .

    $implicit  reduce folosind regula 46 (boolean_condition)


stare 74

   19 if_stmt: IF OPEN_ROUND_BRACKET boolean_condition CLOSED_ROUND_BRACKET . compound_stmt
   20        | IF OPEN_ROUND_BRACKET boolean_condition CLOSED_ROUND_BRACKET . compound_stmt ELSE compound_stmt

    OPEN_CURLY_BRACKET  shift, si mergi în starea 3

    compound_stmt  mergi în starea 92


stare 75

   21 for_stmt: FOR OPEN_ROUND_BRACKET NUMBER assignment_stmt . SEMI_COLON OPEN_ROUND_BRACKET boolean_condition CLOSED_ROUND_BRACKET SEMI_COLON assignment_stmt CLOSED_ROUND_BRACKET compound_stmt

    SEMI_COLON  shift, si mergi în starea 93


stare 76

   22 while_stmt: WHILE OPEN_ROUND_BRACKET boolean_condition CLOSED_ROUND_BRACKET . compound_stmt

    OPEN_CURLY_BRACKET  shift, si mergi în starea 3

    compound_stmt  mergi în starea 94


stare 77

   36 id_index: ID OPEN_RIGHT_BRACKET CONST . CLOSED_RIGHT_BRACKET

    CLOSED_RIGHT_BRACKET  shift, si mergi în starea 95


stare 78

   32 factor2: OPEN_ROUND_BRACKET expression CLOSED_ROUND_BRACKET .

    $implicit  reduce folosind regula 32 (factor2)


stare 79

   44 condition: expression EQUAL expression .

    $implicit  reduce folosind regula 44 (condition)


stare 80

   45 condition: expression NOT_EQUAL expression .

    $implicit  reduce folosind regula 45 (condition)


stare 81

   43 condition: expression LOWER_OR_EQUAL expression .

    $implicit  reduce folosind regula 43 (condition)


stare 82

   41 condition: expression GREATER_OR_EQUAL expression .

    $implicit  reduce folosind regula 41 (condition)


stare 83

   42 condition: expression LOWER_THAN expression .

    $implicit  reduce folosind regula 42 (condition)


stare 84

   40 condition: expression GREATER_THAN expression .

    $implicit  reduce folosind regula 40 (condition)


stare 85

   25 term1: PLUS term2 . term1

    PLUS   shift, si mergi în starea 64
    MINUS  shift, si mergi în starea 65

    $implicit  reduce folosind regula 27 (term1)

    term1  mergi în starea 96


stare 86

   26 term1: MINUS term2 . term1

    PLUS   shift, si mergi în starea 64
    MINUS  shift, si mergi în starea 65

    $implicit  reduce folosind regula 27 (term1)

    term1  mergi în starea 97


stare 87

   30 factor1: DIV factor2 . factor1

    DIV  shift, si mergi în starea 67
    MUL  shift, si mergi în starea 68

    $implicit  reduce folosind regula 31 (factor1)

    factor1  mergi în starea 98


stare 88

   29 factor1: MUL factor2 . factor1

    DIV  shift, si mergi în starea 67
    MUL  shift, si mergi în starea 68

    $implicit  reduce folosind regula 31 (factor1)

    factor1  mergi în starea 99


stare 89

   48 boolean_condition_op: AND boolean_condition .

    $implicit  reduce folosind regula 48 (boolean_condition_op)


stare 90

   49 boolean_condition_op: OR boolean_condition .

    $implicit  reduce folosind regula 49 (boolean_condition_op)


stare 91

   50 boolean_condition_op: XOR boolean_condition .

    $implicit  reduce folosind regula 50 (boolean_condition_op)


stare 92

   19 if_stmt: IF OPEN_ROUND_BRACKET boolean_condition CLOSED_ROUND_BRACKET compound_stmt .
   20        | IF OPEN_ROUND_BRACKET boolean_condition CLOSED_ROUND_BRACKET compound_stmt . ELSE compound_stmt

    ELSE  shift, si mergi în starea 100

    $implicit  reduce folosind regula 19 (if_stmt)


stare 93

   21 for_stmt: FOR OPEN_ROUND_BRACKET NUMBER assignment_stmt SEMI_COLON . OPEN_ROUND_BRACKET boolean_condition CLOSED_ROUND_BRACKET SEMI_COLON assignment_stmt CLOSED_ROUND_BRACKET compound_stmt

    OPEN_ROUND_BRACKET  shift, si mergi în starea 101


stare 94

   22 while_stmt: WHILE OPEN_ROUND_BRACKET boolean_condition CLOSED_ROUND_BRACKET compound_stmt .

    $implicit  reduce folosind regula 22 (while_stmt)


stare 95

   36 id_index: ID OPEN_RIGHT_BRACKET CONST CLOSED_RIGHT_BRACKET .

    $implicit  reduce folosind regula 36 (id_index)


stare 96

   25 term1: PLUS term2 term1 .

    $implicit  reduce folosind regula 25 (term1)


stare 97

   26 term1: MINUS term2 term1 .

    $implicit  reduce folosind regula 26 (term1)


stare 98

   30 factor1: DIV factor2 factor1 .

    $implicit  reduce folosind regula 30 (factor1)


stare 99

   29 factor1: MUL factor2 factor1 .

    $implicit  reduce folosind regula 29 (factor1)


stare 100

   20 if_stmt: IF OPEN_ROUND_BRACKET boolean_condition CLOSED_ROUND_BRACKET compound_stmt ELSE . compound_stmt

    OPEN_CURLY_BRACKET  shift, si mergi în starea 3

    compound_stmt  mergi în starea 102


stare 101

   21 for_stmt: FOR OPEN_ROUND_BRACKET NUMBER assignment_stmt SEMI_COLON OPEN_ROUND_BRACKET . boolean_condition CLOSED_ROUND_BRACKET SEMI_COLON assignment_stmt CLOSED_ROUND_BRACKET compound_stmt

    ID                  shift, si mergi în starea 40
    CONST               shift, si mergi în starea 41
    OPEN_ROUND_BRACKET  shift, si mergi în starea 42

    expression         mergi în starea 43
    term2              mergi în starea 44
    factor2            mergi în starea 45
    id_index           mergi în starea 46
    condition          mergi în starea 47
    boolean_condition  mergi în starea 103


stare 102

   20 if_stmt: IF OPEN_ROUND_BRACKET boolean_condition CLOSED_ROUND_BRACKET compound_stmt ELSE compound_stmt .

    $implicit  reduce folosind regula 20 (if_stmt)


stare 103

   21 for_stmt: FOR OPEN_ROUND_BRACKET NUMBER assignment_stmt SEMI_COLON OPEN_ROUND_BRACKET boolean_condition . CLOSED_ROUND_BRACKET SEMI_COLON assignment_stmt CLOSED_ROUND_BRACKET compound_stmt

    CLOSED_ROUND_BRACKET  shift, si mergi în starea 104


stare 104

   21 for_stmt: FOR OPEN_ROUND_BRACKET NUMBER assignment_stmt SEMI_COLON OPEN_ROUND_BRACKET boolean_condition CLOSED_ROUND_BRACKET . SEMI_COLON assignment_stmt CLOSED_ROUND_BRACKET compound_stmt

    SEMI_COLON  shift, si mergi în starea 105


stare 105

   21 for_stmt: FOR OPEN_ROUND_BRACKET NUMBER assignment_stmt SEMI_COLON OPEN_ROUND_BRACKET boolean_condition CLOSED_ROUND_BRACKET SEMI_COLON . assignment_stmt CLOSED_ROUND_BRACKET compound_stmt

    ID  shift, si mergi în starea 14

    assignment_stmt  mergi în starea 106


stare 106

   21 for_stmt: FOR OPEN_ROUND_BRACKET NUMBER assignment_stmt SEMI_COLON OPEN_ROUND_BRACKET boolean_condition CLOSED_ROUND_BRACKET SEMI_COLON assignment_stmt . CLOSED_ROUND_BRACKET compound_stmt

    CLOSED_ROUND_BRACKET  shift, si mergi în starea 107


stare 107

   21 for_stmt: FOR OPEN_ROUND_BRACKET NUMBER assignment_stmt SEMI_COLON OPEN_ROUND_BRACKET boolean_condition CLOSED_ROUND_BRACKET SEMI_COLON assignment_stmt CLOSED_ROUND_BRACKET . compound_stmt

    OPEN_CURLY_BRACKET  shift, si mergi în starea 3

    compound_stmt  mergi în starea 108


stare 108

   21 for_stmt: FOR OPEN_ROUND_BRACKET NUMBER assignment_stmt SEMI_COLON OPEN_ROUND_BRACKET boolean_condition CLOSED_ROUND_BRACKET SEMI_COLON assignment_stmt CLOSED_ROUND_BRACKET compound_stmt .

    $implicit  reduce folosind regula 21 (for_stmt)
