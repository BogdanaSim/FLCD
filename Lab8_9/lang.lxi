%{
#include <stdio.h>
#include <string.h>
int lines = 1;
#include "lang.tab.h"
%}

%option noyywrap
%option caseless

DIGIT [0-9]
NON_ZERO_DIGIT [1-9]
NUMBER 0|[-]?[1-9][0-9]*
LETTER \'[a-zA-Z0-9 ]\'
STRING \'[a-zA-Z0-9.,;! ]*\' 
IDENTIFIER [a-zA-Z]([a-zA-Z]|[0-9])*

%%

"and" { printf("Reserved word - %s\n", yytext); return AND;}
"or" { printf("Reserved word - %s\n", yytext);return OR;}
"var" { printf("Reserved word - %s\n", yytext);return VAR;}
"number" { printf("Reserved word - %s\n", yytext); return NR;}
"string" { printf("Reserved word - %s\n", yytext); return STR;}
"if" { printf("Reserved word - %s\n", yytext); return IF;}
"else" { printf("Reserved word - %s\n", yytext);  return ELSE;}
"while" { printf("Reserved word - %s\n", yytext); return WHILE;}
"for" { printf("Reserved word - %s\n", yytext);  return FOR;}
"exec" { printf("Reserved word - %s\n", yytext);  return EXEC;}
"read" { printf("Reserved word - %s\n", yytext); return READ;}
"write" { printf("Reserved word - %s\n", yytext); return WRITE;}
"array" { printf("Reserved word - %s\n", yytext); return ARRAY;}


{IDENTIFIER} {printf("Identifier - %s\n", yytext);  return ID;}



{NUMBER} {printf("Number constant - %s\n", yytext);return CONST;}

{STRING} {printf("String constant - %s\n", yytext); return CONST;}



"+" { printf("Operator - %s\n", yytext); return PLUS;}
"-" { printf("Operator - %s\n", yytext); return MINUS;}
"*" { printf("Operator - %s\n", yytext); return MUL;}
"/" { printf("Operator - %s\n", yytext); return DIV;}
"%" { printf("Operator - %s\n", yytext); return MOD;}
">" { printf("Operator - %s\n", yytext); return GREATER_THAN;}
"<" { printf("Operator - %s\n", yytext); return LOWER_THAN;}
">=" { printf("Operator - %s\n", yytext); return GREATER_OR_EQUAL;}
"=" { printf("Operator - %s\n", yytext); return ASSIGNMENT;}
"<=" { printf("Operator - %s\n", yytext); return LOWER_OR_EQUAL;}
"==" { printf("Operator - %s\n", yytext); return EQUAL;}
"!=" { printf("Operator - %s\n", yytext); return NOT_EQUAL;}
"!" { printf("Operator - %s\n", yytext); return NOT;}


"(" { printf("Separator - %s\n", yytext); return OPEN_ROUND_BRACKET;}
")" { printf("Separator - %s\n", yytext); return CLOSED_ROUND_BRACKET;}
"[" { printf("Separator - %s\n", yytext); return OPEN_RIGHT_BRACKET;}
"]" { printf("Separator - %s\n", yytext); return CLOSED_RIGHT_BRACKET;}
"{" { printf("Separator - %s\n", yytext); return OPEN_CURLY_BRACKET;}
"}" { printf("Separator - %s\n", yytext); return CLOSED_CURLY_BRACKET;}
"," { printf("Separator - %s\n", yytext); return COMMA;}
"." { printf("Separator - %s\n", yytext); return DOT;}
";" { printf("Separator - %s\n", yytext);return SEMI_COLON;}
":" { printf("Separator - %s\n", yytext);return COLON;}

[ \t]+ {}

[\n]+ {++lines;}

[0-9]([a-zA-Z]|[0-9])* {printf("Illegal identifier at token {%s} at line %d\n", yytext, lines); }

\'[a-zA-Z0-9.,;! ]*$ {printf("Bad string at token {%s} at line %d\n", yytext, lines); }
%%

